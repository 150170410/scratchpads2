<?php

function scratchpads_issues_block_menu(){
  return array(
    'user/%user/inbox' => array(
      'page callback' => 'scratchpads_issues_block_notify_endpoint',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    ),
    'issues/%' => array(
      'page callback' => 'scratchpads_issues_block_view_issue',
      'page arguments' => array(1),
      'access arguments' => array('access content')
    )
  );
}

/**
 * Implements hook_block_info_alter()
 */
function scratchpads_issues_block_block_info_alter(&$blocks, $theme, $code_blocks){
  if($theme != 'scratchpads_admin'){
    $blocks['remote_issue_tab'][0]['region'] = 'sidebar';
    $blocks['remote_issue_tab'][0]['status'] = 1;
  }
}

/**
 * Implements hook_issue_tab_settings from remote_issue_tab module
 */
function scratchpads_issues_block_issue_tab_settings() {
  return array(
    "fetch_url" => "https://api.github.com/repos/NaturalHistoryMuseum/scratchpads2/issues",
    "html_link" => "https://github.com/NaturalHistoryMuseum/scratchpads2/issues",
    "header" => 'You will need to sign in with a GitHub user account.
      If you don\'t have one you will need to '.
      l('create an account', 'https://github.com/join').'.',
    "footer" => '<h2>Help</h2><p>Not sure what you are doing, try the <a href="http://help.scratchpads.eu/">Scratchpad Help Wiki</a>.',
    "scripts" => array(
      drupal_get_path('module', 'scratchpads_issues_block') . "/js/scratchpads_issues_block.js"
    ),
    "external_scripts" => array(
      "https://cdn.jsdelivr.net/npm/marked/marked.min.js"
    )
  );
}

function scratchpads_issues_block_form_remote_issue_tab_create_form_alter (&$form) {
  array_unshift($form['#submit'], 'scratchpads_issues_block_alter_description');
}

function scratchpads_issues_block_alter_description ($form, &$form_state) {
  global $user;
  global $base_url;

  $body = $form_state['values']['issue_body'];
  $scratchpad_name = variable_get('site_name');
  $user_page = url("/user/$user->uid" , array('absolute' => true));

  $user_link = "[$user->name]($user_page)";

  $form_state['values']['issue_body'] = "- Added by $user_link
- Scratchpad: [$scratchpad_name]($base_url)

### Description:

$body";
}

/**
 * Endpoint that receives a POST notification from the github bridge service
 * and forwards it to the appropriate user.
 */
function scratchpads_issues_block_notify_endpoint($user){
  // Validate the request is a post and return proper response code on failure.
  if ($_SERVER['REQUEST_METHOD'] != 'POST'){
    header('HTTP/1.1 405 Only POST method allowed');
    return;
  }

  // Syntax is a subset of ActivityStreams2 in case we want to expand use of this protocol in future
  if (!preg_match('/^application\/((activity|ld)\+)?json(;|$)/i', $_SERVER['CONTENT_TYPE'])) {
    header('HTTP/1.1 415 Only application/json data allowed');
    return;
  }

  // Ensure request comes from a trusted source
  // TODO: Replace this with something a little more crypto
  $expected_token = variable_get('github_bridge_token', 'dev-token');
  $auth = $_SERVER['HTTP_AUTHORIZATION'];
  if ($auth !== "Bearer $expected_token") {
    header('HTTP/1.1 401 Invalid auth token');
    return;
  }

  // Get POST body
  $received_json = file_get_contents("php://input",  TRUE);
  $json = drupal_json_decode($received_json, TRUE);

  $summary = $json['summary'];
  $link = $json['object']['url'];

  // Send the email.
  drupal_mail(
    'scratchpads_issues_block',
    'notification',
    $user->mail,
    user_preferred_language($user),
    array(
      'summary' => $summary,
      'link' => $link
    )
  );
}

/**
 * Set template for github notification email.
 */
function scratchpads_issues_block_mail($key, &$message, $params) {
  $summary = $params['summary'];
  $link = $params['link'];

  switch ($key) {
    case 'notification':
      $message['subject'] = $summary;
      $message['body'][] = "View this change on GitHub: $link";
      break;
  }
}

/**
 * Implements hook_github_create_issue
 */
function scratchpads_issues_block_github_create_issue($issue) {
  scratchpads_issues_block_subscribe($issue->number);
}

/**
 * Here we send the issue follow request to the bridge service
 */
function scratchpads_issues_block_subscribe($issue_id) {
  global $user;
  $bridge = variable_get('github_bridge_host', 'http://ap-gh-bridge-webserver');
  $token = variable_get('github_bridge_token', 'dev-token');
  $inbox = url("/user/$user->uid/inbox" , array('absolute' => true));

  drupal_http_request(
    "$bridge/follow",
    array(
      'headers' => array(
        'Content-Type'=> 'application/json',
        'Authorization' => "Bearer $token"
      ),
      'method' => 'POST',
      'data' => json_encode(array(
        'user' => $inbox,
        'issue' => $issue_id
      ))
    )
  );
}

/**
 * This is the page that allows us to view a given thread from github
 * and reply to it.
 */
function scratchpads_issues_block_view_issue($id){
  // Todo: Maybe think about caching this in future
  // Todo: Use a theme function

  // Get the settings set in the remote issue tab module
  $auth_token = variable_get('remote_issue_tab_github_auth_key');
  $repo = variable_get('remote_issue_tab_github_repository');

  list($repo_owner, $repo_name) = explode('/', $repo);

  // Load the issue from drupal
  $client = new \Github\Client();
  $client->authenticate($auth_token, null, \Github\Client::AUTH_HTTP_TOKEN);

  try {
    $issue = $client->api('issue')->show($repo_owner, $repo_name, $id);
  } catch(\Github\Exception\RuntimeException $e) {
    if ($e->getCode() == 404) {
      return drupal_not_found();
    } else {
      // Mysterious error - could be host failing to resolve?
      // echo $e->getCode();
      // echo $e->getMessage();
      throw $e;
    }
  }

  // Don't let users see/reply to duplicates
  foreach($issue['labels'] as $label) {
    // Todo: Use the actual label ID here
    // Do we have any other `duplicate` (or other) labels to add to this?
    if ($label['name'] === 'Redmine duplicate') {
      return drupal_not_found();
    }
  }

  $title = $issue['title'];
  $author = $issue['user']['login'];
  $body = $issue['body'];
  $url = '';

  // For issues generated by scratchpads we have put the metadata (e.g. author, scratchpad)
  // in the head of the issue and added the body after a "Description" header
  // Let's get that data out and display it nicely
  // This might be worth moving in to the bridge app actually
  if ($author === 'scratchpads' || $author === 'informatics-dev') {
    $parts = explode('### Description:', $body);
    $body = array_pop($parts);
    $meta = array_pop($parts);
  }

  // There are a few types and styles of recording meta data because of
  // the data available at the time the issue was created
  if ($meta) {
    $matches = [];

    // Imported from redmine: `- Added by **User Name**`
    preg_match('/- Added by (\*+)([^*]*)\1/i', $meta, $matches);
    if($matches[2]) {
      $author = $matches[2];
    }

    // Added through scratchpads: `- Added by [User Name](http://scratchpad.example/user/1)`
    preg_match('/- Added by \[(.*)\]\((.*)\)/i', $meta, $matches);
    if($matches[1]) {
      $author = url($matches[1], $matches[2]);
    }

    // Imported from redmine: ` - Scratchpads URL: scratchpad.example`
    preg_match('/- Scratchpads URL: (.*)$/im', $meta, $matches)[1];
    if($matches[1]) {
      $url = ' ( ' . l($matches[1], $matches[1]) . ' )';
    }

    // Added through scratchpads: ` - Scratchpad: [Scratchpad Name](http://scratchpad.example)`
    preg_match('/- Scratchpad: \[(.*)\]\((.*)\)$/im', $meta, $matches)[1];
    if($matches[1]) {
      $url = ' ( ' . l($matches[1], $matches[2]) . ' )';
    }
  }


  $content = array(
    // Maybe we should cache this - but we'd need to make sure we get updates,
    // probably from github webhook.
    // '#cache' => array(
    //   'keys' => array('github_issue', $id)
    // ),
    // Todo: Use a theme function for this page
    'issue' => array(
      '#type' => 'markup',
      '#markup' => "<h1>$title</h1>
<b>$author</b><i>$url</i>
<pre>$body</pre>"
    )
  );

  // Get all comments
  $comments = $client->api('issue')->comments()->all($repo_owner, $repo_name, $id);

  $replies = [];

  foreach($comments as $comment) {
    $author = $comment['user']['login'];
    $body = $comment['body'];

    // The metadata recording style is different for comments.
    // Also we only have user details, not scratchpad name
    // Todo: Extract repeated code to a function
    if ($author === 'scratchpads' || $author === 'informatics-dev') {
      $comment_match = '/Comment by \*\*(.*)\*\*/';
      if(preg_match($comment_match, $body, $matches)) {
        $author = $matches[1];
        $body = preg_replace($comment_match, '', $body);
      }

      $comment_match = '/Comment by \[(.*)\]\((.*)\)/';
      if(preg_match($comment_match, $body, $matches)) {
        $author = l($matches[1], $matches[2]);
        $body = preg_replace($comment_match, '', $body);
      }
    }

    // Todo: Use theme function instead of markup element
    $replies[] = array(
      '#markup' => "
        <hr>
        <b>$author</b>
        <pre>$body</pre>
      "
    );
  }

  $content['replies'] = $replies;

  // Finally add the form for posting a reply
  $content['reply_form'] = drupal_get_form('scratchpads_issues_block_reply_form');

  return $content;
}

/**
 * Implements hook_form
 * The form for replying to an issue thread
 */
function scratchpads_issues_block_reply_form($form, &$form_state){
  $form['content'] = array(
    '#title' => t('Your reply'),
    '#type' => 'textarea',
    '#required' => TRUE
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add Reply'
  );

  return $form;
}

/**
 * Submit handler for issue reply form
 */
function scratchpads_issues_block_reply_form_submit($form, &$form_state) {
  global $user;

  // Add some metadata: Username and profile page
  $user_page = url("/user/$user->uid" , array('absolute' => true));
  $user_link = "[$user->name]($user_page)";

  $issue = arg(1);
  $content = $form_state['values']['content'];

  // Todo: Extract this code as it's repeated in a couple of places
  $auth_token = variable_get('remote_issue_tab_github_auth_key');
  $repo = variable_get('remote_issue_tab_github_repository');

  list($repo_owner, $repo_name) = explode('/', $repo);

  $client = new \Github\Client();
  $client->authenticate($auth_token, null, \Github\Client::AUTH_HTTP_TOKEN);

  $client->api('issue')->comments()->create(
    $repo_owner,
    $repo_name,
    $issue,
    array(
      'body' => "Comment by $user_link

$content"
    )
  );
}
