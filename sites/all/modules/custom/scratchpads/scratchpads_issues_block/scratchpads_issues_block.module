<?php

function scratchpads_issues_block_menu(){
  return array(
    'user/%user/inbox' => array(
      'page callback' => 'scratchpads_issues_block_notify_endpoint',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    )
  );
}

/**
 * Implements hook_block_info_alter()
 */
function scratchpads_issues_block_block_info_alter(&$blocks, $theme, $code_blocks){
  if($theme != 'scratchpads_admin'){
    $blocks['remote_issue_tab'][0]['region'] = 'sidebar';
    $blocks['remote_issue_tab'][0]['status'] = 1;
  }
}

/**
 * Implements hook_issue_tab_settings from remote_issue_tab module
 */
function scratchpads_issues_block_issue_tab_settings() {
  return array(
    "fetch_url" => "https://api.github.com/repos/NaturalHistoryMuseum/scratchpads2/issues",
    "html_link" => "https://github.com/NaturalHistoryMuseum/scratchpads2/issues",
    "header" => 'You will need to sign in with a GitHub user account.
      If you don\'t have one you will need to '.
      l('create an account', 'https://github.com/join').'.',
    "footer" => '<h2>Help</h2><p>Not sure what you are doing, try the <a href="http://help.scratchpads.eu/">Scratchpad Help Wiki</a>.',
    "scripts" => array(
      drupal_get_path('module', 'scratchpads_issues_block') . "/js/scratchpads_issues_block.js"
    ),
    "external_scripts" => array(
      "https://cdn.jsdelivr.net/npm/marked/marked.min.js"
    )
  );
}

function scratchpads_issues_block_form_remote_issue_tab_create_form_alter (&$form) {
  array_unshift($form['#submit'], 'scratchpads_issues_block_alter_description');
}

function scratchpads_issues_block_alter_description ($form, &$form_state) {
  global $user;
  global $base_url;

  $body = $form_state['values']['issue_body'];
  $username = $user->name;
  $scratchpad_name = variable_get('site_name');

  $form_state['values']['issue_body'] = "- Added by *$user->name*
- Scratchpad: [$scratchpad_name]($base_url)

### Description:

$body";
}

/**
 * Endpoint that receives a POST notification from the github bridge service
 * and forwards it to the appropriate user.
 */
function scratchpads_issues_block_notify_endpoint($user){
  // Validate the request is a post and return proper response code on failure.
  if ($_SERVER['REQUEST_METHOD'] != 'POST'){
    header('HTTP/1.1 405 Only POST method allowed');
    return;
  }

  // Syntax is a subset of ActivityStreams2 in case we want to expand use of this protocol in future
  if (!preg_match('/^application\/((activity|ld)\+)?json(;|$)/i', $_SERVER['CONTENT_TYPE'])) {
    header('HTTP/1.1 415 Only application/json data allowed');
    return;
  }

  // Ensure request comes from a trusted source
  // TODO: Replace this with something a little more crypto
  $expected_token = variable_get('github_bridge_token', 'dev-token');
  $auth = $_SERVER['HTTP_AUTHORIZATION'];
  if ($auth !== "Bearer $expected_token") {
    header('HTTP/1.1 401 Invalid auth token');
    return;
  }

  // Get POST body
  $received_json = file_get_contents("php://input",  TRUE);
  $json = drupal_json_decode($received_json, TRUE);

  $summary = $json['summary'];
  $link = $json['object']['url'];

  // Send the email.
  drupal_mail(
    'scratchpads_issues_block',
    'notification',
    $user->mail,
    user_preferred_language($user),
    array(
      'summary' => $summary,
      'link' => $link
    )
  );
}

/**
 * Set template for github notification email.
 */
function scratchpads_issues_block_mail($key, &$message, $params) {
  $summary = $params['summary'];
  $link = $params['link'];

  switch ($key) {
    case 'notification':
      $message['subject'] = $summary;
      $message['body'][] = "View this change on GitHub: $link";
      break;
  }
}

/**
 * Implements hook_github_create_issue
 */
function scratchpads_issues_block_github_create_issue($issue) {
  scratchpads_issues_block_subscribe($issue->number);
}

/**
 * Here we send the issue follow request to the bridge service
 */
function scratchpads_issues_block_subscribe($issue_id) {
  global $user;
  $bridge = variable_get('github_bridge_host', 'http://ap-gh-bridge-webserver');
  $token = variable_get('github_bridge_token', 'dev-token');
  $inbox = url("/user/$user->uid/inbox" , array('absolute' => true));

  drupal_http_request(
    "$bridge/follow",
    array(
      'headers' => array(
        'Content-Type'=> 'application/json',
        'Authorization' => "Bearer $token"
      ),
      'method' => 'POST',
      'data' => json_encode(array(
        'user' => $inbox,
        'issue' => $issue_id
      ))
    )
  );
}
