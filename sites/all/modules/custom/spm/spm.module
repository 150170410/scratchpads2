<?php

/**
 * Default dialog title
 *
 */
define('SPM_DEFAULT_TITLE', t('System messages'));

/**
 * Default dialog width
 *
 */
define('SPM_DEFAULT_WIDTH', 420);

/**
 * Default maximum message content height
 *
 */
define('SPM_DEFAULT_MAX_HEIGHT', 200);

/**
 * Default dragging option
 *
 */
define('SPM_DEFAULT_DRAGGING', 'drag_title');

/**
 * Default close button text
 *
 */
define('SPM_DEFAULT_CLOSE_TEXT', t('Ok'));

/**
 * Below are all the default color schema of the dialog box
 * Color of the text in the title bar
 *
 */
define('SPM_DEFAULT_TITLE_COLOR', 'E8E8E8');

/**
 * Default title bar background color
 *
 */
define('SPM_DEFAULT_TITLE_BGCOLOR', '111111');

/**
 * Default start color of the gradient
 *
 */
define('SPM_DEFAULT_TITLE_BGCOLOR_START', '444444');

/**
 * Default end color of the gradient
 *
 */
define('SPM_DEFAULT_TITLE_BGCOLOR_END', '111111');

/**
 * Default close button background color
 *
 */
define('SPM_DEFAULT_BUTTON_COLOR', '333333');

/**
 * Default button text color
 *
 */
define('SPM_DEFAULT_BUTTON_BGCOLOR', 'CCCECD');

/**
 * Default start color of the gradient
 *
 */
define('SPM_DEFAULT_BUTTON_BGCOLOR_START', 'EBEBEB');

/**
 * Default end color of the gradient
 *
 */
define('SPM_DEFAULT_BUTTON_BGCOLOR_END', 'CCCECD');

/**
 * Default dialog background color
 *
 */
define('SPM_DEFAULT_DIALOG_BGCOLOR', 'FFFFFF');

/**
 * Default fadeout time for status messages.
 *
 */
define('SPM_DEFAULT_FADEOUT_STATUS', 5000);

/**
 * Default fadeout time for warning messages.
 *
 */
define('SPM_DEFAULT_FADEOUT_WARNING', 5000);

/**
 * Default fadeout time for error messages.
 *
 */
define('SPM_DEFAULT_FADEOUT_ERROR', 5000);


/**
 * Implements hook_permission().
 *
 */
function spm_permission() {
  return array(
    'administer spm' => array(
      'title' => t('Administer Simple Popup Message'),
      'description' => t('Perform Simple Popup Message settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 */
function spm_menu() {
  $items['admin/config/user-interface/spm'] = array(
    'title' => 'Simple Popup Message settings',
    'description' => 'SPM style settings.',
    'access arguments' => array('adminster spm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spm_setting_form'),
    'weight' => 1,
  );
  $items['admin/config/user-interface/spm/color-schema'] = array(
    'title' => 'Color schema',
    'description' => 'SPM style settings.',
    'access arguments' => array('adminster spm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spm_color_setting_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/config/user-interface/spm/settings'] = array(
    'title' => 'Control settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

function spm_form_alter(&$form, &$form_state, $form_id){
  if(isset($form['actions']['submit']['#submit'])){
    //$form['actions']['submit']['#submit']['#ajax']
  }
}

/**
 * Setting form.
 *
 */
function spm_setting_form($form, &$form_state) {

  drupal_add_js(drupal_get_path('module', 'spm') . '/spm_form.js');
  $form = array();
  $form['title_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Title settings'),
  );
  $form['title_settings']['display_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display title'),
    '#default_value' => variable_get('spm_display_title', 1),
  );
  $form['title_settings']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Messages dialog title'),
    '#required' => TRUE,
    '#default_value' => variable_get('spm_title', SPM_DEFAULT_TITLE),
  );

  $form['control_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Control settings'),
  );
  $form['control_settings']['draggable'] = array(
    '#type' => 'radios',
    '#title' => t('Dragging settings'),
    '#options' => array(
      'disable' => t('Disable'),
      'drag_title' => t('Use the title bar as the handler'),
      'drag_all' => t('Use the whole dialog as the handler'),
    ),
    '#default_value' => variable_get('spm_drag', SPM_DEFAULT_DRAGGING),
  );
  $form['control_settings']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Dialog width (in px)'),
    '#required' => TRUE,
    '#description' => t('Your probably set it around 200 - 600 depends on your preferences.'),
    '#default_value' => variable_get('spm_width', SPM_DEFAULT_WIDTH),
  );
  $form['control_settings']['max_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Dialog maximum height (in px)'),
    '#description' => t('This maximum height is for the content of the messages NOT including the title bar and close button.'),
    '#required' => TRUE,
    '#default_value' => variable_get('spm_max_height', SPM_DEFAULT_MAX_HEIGHT),
  );
  $form['control_settings']['close'] = array(
    '#type' => 'textfield',
    '#title' => t('Close text'),
    '#default_value' => variable_get('spm_close_text', SPM_DEFAULT_CLOSE_TEXT),
    '#description' => t('Leave blank if you do not want any text appearing, i.e. apply your own image to this button using CSS.'),
  );
  $form['control_settings']['admin_control'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable SPM in administer pages.'),
    '#default_value' => variable_get('spm_admin_disable', 1),
  );

  $form['fadeout_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Auto fadeout'),
  );
  $form['fadeout_settings']['fadeout_status'] = array(
    '#type' => 'textfield',
    '#title' => t('Status message (in ms)'),
    '#description' => t('0 for always stay.'),
    '#required' => TRUE,
    '#default_value' => variable_get('spm_fadeout_status', SPM_DEFAULT_FADEOUT_STATUS),
  );
  $form['fadeout_settings']['fadeout_warning'] = array(
    '#type' => 'textfield',
    '#title' => t('Warning message (in ms)'),
    '#description' => t('0 for always stay.'),
    '#required' => TRUE,
    '#default_value' => variable_get('spm_fadeout_warning', SPM_DEFAULT_FADEOUT_WARNING),
  );
  $form['fadeout_settings']['fadeout_error'] = array(
    '#type' => 'textfield',
    '#title' => t('Error message (in ms)'),
    '#description' => t('0 for always stay.'),
    '#required' => TRUE,
    '#default_value' => variable_get('spm_fadeout_error', SPM_DEFAULT_FADEOUT_ERROR),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Validate function for settings form.
 *
 */
function spm_setting_form_validate($form, &$form_state) {

  // Check width.
  $value = $form_state['values']['width'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    $message = t('Width must be a possitive integer.');
    form_set_error('width', $message);
  }

  // Check max height.
  $value = $form_state['values']['max_height'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    $message = t('Maximum height must be a possitive integer.');
    form_set_error('max_height', $message);
  }

  // Make sure display title is checked if drag title is chosen.
  if ($form_state['values']['draggable'] == 'drag_title') {
    if (empty($values['display_title'])) {
      $values['display_title'] = 1;
      form_set_error('draggable', t('Display title is enforced to be checked due to dragging settings.'));
    }
  }

}

/**
 * Submit handler for settings form.
 *
 */
function spm_setting_form_submit($form, &$form_state) {

  $values = &$form_state['values'];

  // Make sure display title is checked if drag title is chosen.
  if ($values['draggable'] == 'drag_title') {
    if (empty($values['display_title'])) {
      $values['display_title'] = 1;
      drupal_set_message(t('Display title is enforced to be checked due to dragging settings.'));
    }
  }

  variable_set('spm_display_title', $values['display_title']);
  variable_set('spm_title', check_plain($values['title']));
  variable_set('spm_drag', $values['draggable']);
  variable_set('spm_width', $values['width']);
  variable_set('spm_max_height', $values['max_height']);
  variable_set('spm_close_text', check_plain($values['close']));
  variable_set('spm_admin_disable', $values['admin_control']);
  variable_set('spm_fadeout_status', $values['fadeout_status']);
  variable_set('spm_fadeout_warning', $values['fadeout_warning']);
  variable_set('spm_fadeout_error', $values['fadeout_error']);
  drupal_set_message(t('Settings saved.'));

}

/**
 * Setting form.
 *
 */
function spm_color_setting_form($form, &$form_state) {

  $form = array();
  $form['title_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Title bar'),
  );
  $form['title_settings']['title_text_color'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Text color'),
    '#default_value' => variable_get('spm_title_text_color', SPM_DEFAULT_TITLE_COLOR),
  );
  $form['title_settings']['title_background_color'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Background color'),
    '#description' => t('When browser does not support CSS3 gradient. This will be used.'),
    '#default_value' => variable_get('spm_title_bgcolor', SPM_DEFAULT_TITLE_BGCOLOR),
  );
  $form['title_settings']['title_background_color_start'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Gradient start color.'),
    '#description' => t('The start color of the gradient.  If you do not want the gradient effect, please make start and end color to be exactly the same.'),
    '#default_value' => variable_get('spm_title_bgcolor_start', SPM_DEFAULT_TITLE_BGCOLOR_START),
  );
  $form['title_settings']['title_background_color_end'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Gradient end color'),
    '#description' => t('The end color of the gradient.  If you do not want the gradient effect, please make start and end color to be exactly the same.'),
    '#default_value' => variable_get('spm_title_bgcolor_end', SPM_DEFAULT_TITLE_BGCOLOR_END),
  );

  $form['color_button'] = array(
    '#type' => 'fieldset',
    '#title' => t('Close Button Color schema'),
  );
  $form['color_button']['button_text_color'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Text color'),
    '#default_value' => variable_get('spm_button_text_color', SPM_DEFAULT_BUTTON_COLOR),
  );
  $form['color_button']['button_background_color'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Background color'),
    '#description' => t('When browser does not support CSS3 gradient.  This will be used.'),
    '#default_value' => variable_get('spm_button_bgcolor', SPM_DEFAULT_BUTTON_BGCOLOR),
  );
  $form['color_button']['button_background_color_start'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Gradient start color'),
    '#description' => t('The start color of the gradient.  If you do not want the gradient effect, please make start and end color to be exactly the same.'),
    '#default_value' => variable_get('spm_button_bgcolor_start', SPM_DEFAULT_BUTTON_BGCOLOR_START),
  );
  $form['color_button']['button_background_color_end'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Gradient end color'),
    '#description' => t('The end color of the gradient.  If you do not want the gradient effect, please make start and end color to be exactly the same.'),
    '#default_value' => variable_get('spm_button_bgcolor_end', SPM_DEFAULT_BUTTON_BGCOLOR_END),
  );

  $form['color_dialog'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dialog'),
  );
  $form['color_dialog']['dialog_bgcolor'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Background color'),
    '#default_value' => variable_get('spm_dialog_bgcolor', SPM_DEFAULT_DIALOG_BGCOLOR),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Submit handler for settings form
 *
 */
function spm_color_setting_form_submit($form, &$form_state) {

  $values = &$form_state['values'];

  variable_set('spm_title_text_color', $values['title_text_color']);
  variable_set('spm_title_bgcolor', $values['title_background_color']);
  variable_set('spm_title_bgcolor_start', $values['title_background_color_start']);
  variable_set('spm_title_bgcolor_end', $values['title_background_color_end']);

  variable_set('spm_button_bgcolor', $values['button_background_color']);
  variable_set('spm_button_bgcolor_start', $values['button_background_color_start']);
  variable_set('spm_button_bgcolor_end', $values['button_background_color_end']);
  variable_set('spm_button_text_color', $values['button_text_color']);

  variable_set('spm_dialog_bgcolor', $values['dialog_bgcolor']);

  drupal_set_message(t('Color settings saved.'));
}

/**
 * Implements hook_theme_registry_alter().
 *
 */
function spm_theme_registry_alter(&$theme_registry) {
  $theme_registry['status_messages']['function'] = 'theme_spm_messages';
  $theme_registry['status_messages']['theme path'] = drupal_get_path('module', 'spm');
}

/**
 * Implements hook_theme().
 *
 */
function spm_theme() {
  return array(
    'spm_messages' => array(
      'variables' => array('display' => NULL),
    ),
  );
}


/**
 * Simply copy the original theme function and to add div wrapper.
 *
 */
function theme_spm_messages(&$variables) {

  $display = $variables['display'];
  $output = '';

  $status_heading = array(
    'status' => t('Status message'),
    'error' => t('Error message'),
    'warning' => t('Warning message'),
  );
  foreach (drupal_get_messages($display) as $type => $messages) {
    $output .= "<div class=\"messages $type\">\n";
    if (!empty($status_heading[$type])) {
      $output .= '<h2 class="element-invisible">' . $status_heading[$type] . "</h2>\n";
    }
    if (count($messages) > 1) {
      $output .= " <ul>\n";
      foreach ($messages as $message) {
        $output .= '  <li>' . $message . "</li>\n";
      }
      $output .= " </ul>\n";
    }
    else {
      $output .= $messages[0];
    }
    $output .= "</div>\n";
  }
  if ($output) {
    if (variable_get('spm_admin_disable', 1) == 1 && arg(0) == 'admin') {
      return $output;
    }
    else{
      // add js and css.
      drupal_add_library('system', 'ui.draggable');
      drupal_add_css(drupal_get_path('module', 'spm') . '/spm.css');
      drupal_add_js(drupal_get_path('module', 'spm') . '/spm.js');
      drupal_add_js(array(
        'spm' => array(
          'dialog_id' => '#spm-status-messages',
          'dialog_drag' => variable_get('spm_drag', SPM_DEFAULT_DRAGGING),
          'dialog_width' => variable_get('spm_width', SPM_DEFAULT_WIDTH),
          'dialog_max_height' => variable_get('spm_max_height', SPM_DEFAULT_MAX_HEIGHT),
          'fadeout_status' => variable_get('spm_fadeout_status', SPM_DEFAULT_FADEOUT_STATUS),
          'fadeout_warning' => variable_get('spm_fadeout_warning', SPM_DEFAULT_FADEOUT_WARNING),
          'fadeout_error' => variable_get('spm_fadeout_error', SPM_DEFAULT_FADEOUT_ERROR),
        )), 'setting'
      );

      // Title bar inline css.
      $title_style  = 'background-color: #' . variable_get('spm_title_bgcolor', SPM_DEFAULT_TITLE_BGCOLOR) . ';';
      $title_style .= 'filter: progid:DXImageTransform.Microsoft.Gradient(gradientType=0,startColorStr=#' . variable_get('spm_title_bgcolor_start', SPM_DEFAULT_TITLE_BGCOLOR_START) . ',endColorStr=#' . variable_get('spm_title_bgcolor_end', SPM_DEFAULT_TITLE_BGCOLOR_END) . ');';
      $title_style .= 'background:-moz-linear-gradient(top,#' . variable_get('spm_title_bgcolor_start', SPM_DEFAULT_TITLE_BGCOLOR_START) . ',#' . variable_get('spm_title_bgcolor_end', SPM_DEFAULT_TITLE_BGCOLOR_END) . ');';
      $title_style .= 'background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#' . variable_get('spm_title_bgcolor_start', SPM_DEFAULT_TITLE_BGCOLOR_START) . '), to(#' . variable_get('spm_title_bgcolor_end', SPM_DEFAULT_TITLE_BGCOLOR_END) . '));';
      $title_style .= 'color:#' . variable_get('spm_title_text_color', SPM_DEFAULT_TITLE_COLOR) . ';';

      // Button inline css.
      $button_style  = 'background-color: #' . variable_get('spm_button_bgcolor', SPM_DEFAULT_BUTTON_BGCOLOR) . ';';
      $button_style .= 'filter: progid:DXImageTransform.Microsoft.Gradient(gradientType=0,startColorStr=#' . variable_get('spm_button_bgcolor_start', SPM_DEFAULT_BUTTON_BGCOLOR_START) . ',endColorStr=#' . variable_get('spm_button_bgcolor_end', SPM_DEFAULT_BUTTON_BGCOLOR_END) . ');';
      $button_style .= 'background:-moz-linear-gradient(top,#' . variable_get('spm_button_bgcolor_start', SPM_DEFAULT_BUTTON_BGCOLOR_START) . ',#' . variable_get('spm_button_bgcolor_end', SPM_DEFAULT_BUTTON_BGCOLOR_END) . ');';
      $button_style .= 'background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#' . variable_get('spm_button_bgcolor_start', SPM_DEFAULT_BUTTON_BGCOLOR_START) . '), to(#' . variable_get('spm_button_bgcolor_end', SPM_DEFAULT_BUTTON_BGCOLOR_END) . '));';
      $button_style .= 'color:#' . variable_get('spm_button_text_color', SPM_DEFAULT_BUTTON_COLOR) . ';';

      // Create content.
      $content = $output;
      $output = '<div id="spm-status-messages" style="display: none; background-color: #' . variable_get('spm_dialog_bgcolor', SPM_DEFAULT_DIALOG_BGCOLOR) . '">' . "\n";
      if (variable_get('spm_display_title', 1)) {
        $output .= '  <div class="title" style="' . $title_style . '">' . variable_get('spm_title', SPM_DEFAULT_TITLE) . '</div>' . "\n";
      }
      $output .= '  <div class="content">' . $content . '</div>' . "\n";
      $output .= '  <div class="close" style="' . $button_style . '">' . t(variable_get('spm_close_text', SPM_DEFAULT_CLOSE_TEXT)) . '</div>' . "\n";;
      $output .= '</div>';
    }
  }
  return $output;
}
